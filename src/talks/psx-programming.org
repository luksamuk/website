#+title: Retro Game Dev
#+subtitle: Desenvolvendo para o PlayStation em 2024
#+author: Lucas S. Vieira
#+email: lucasvieira@protonmail.com
#+date: 19 de outubro de 2024
#+language: en_us
#+reveal_margin: 0.2
#+reveal_trans: linear
#+reveal_theme: serif
#+reveal_plugins: (print-pdf zoom)
#+options: num:nil timestamp:nil toc:nil
#+reveal_init_options: slideNumber:true
#+startup: latexpreview showall inlineimages
# #+options: reveal_single_file:t

#+reveal_title_slide: <h3><b>%t</b></h3><img src="./psxprog/sony-playstation.png" height=200px><p>%s</p><p>%a<br/>%d</p><p><b>UaiDev Talks 2024</b></p>
# #+reveal_title_slide: <h3><b>%t</b></h3><p>%s</p><p>%a<br/>%d</p>

:HTML_OPTIONS:
#+html_head: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

#+html: <style>
#+html: .container{
#+html:     display: flex;
#+html: }
#+html: .col{
#+html:     flex: 1;
#+html: }
#+html: </style>
:END:

* Quem sou eu?

# container begin
#+html: <div class="container">

# Column begin
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
Desenvolvedor na Workalove EdTech

#+attr_html: :style font-size:0.6em;text-align:left;
*Interesses:*  Ciência  cognitiva,  teoria  da  computação,  desenvolvimento  de
linguagens, desenvolvimento de jogos, programação bare-metal

#+html: <div style="font-size:0.6em;text-align:left;">
#+html: <p>Co-fundador da Common Lisp Brasil
#+html: <br/>
#+html: <i class="fa fa-globe" aria-hidden="true"></i><code> lisp.com.br</code>
#+html: </p></div>

# Column end
#+html: </div>

# Column begin
#+html: <div class="col">

#+attr_html: :width 200
#+attr_org: :width 200
[[file:psxprog/eu.jpg]]

#+html: <div style="font-size:0.6em;text-align:left;">
#+html: <i class="fa fa-linkedin" aria-hidden="true"></i><code> luksamuk</code><br/>
#+html: <i class="fa fa-globe" aria-hidden="true"></i><code> https://luksamuk.codes/</code><br/>
#+html: <i class="fa fa-github" aria-hidden="true"></i><code> luksamuk</code>
#+html: </div>

# Column end
#+html: </div>

# container end
#+html: </div>

* Visão Geral

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
- História do PlayStation
- Ferramentas e kits de desenvolvimento
- Visão geral do hardware
- Pipeline de gráficos
- Exemplo de código
- Homebrews e links úteis
#+html: </div>

#+html: <div class="col">
#+HTML: <img src="./psxprog/ps1-pic.png">
#+html: </div>
#+html: </div>

#+attr_html: :style font-size:0.6em;text-align:center;
*Esta apresentação tem links interativos! QR Code a seguir.*

#+reveal: split

#+HTML: <img class="r-stretch" src="./psxprog/qrcode-presentation.png">

* História do PlayStation

#+HTML: <img class="r-stretch" src="./psxprog/kutaragi-psx.png">

#+attr_html: :style font-size:0.6em;text-align:center;
*Figura:* Ken Kutaragi e o Sony PlayStation

** Antes do Super Nintendo...

#+HTML: <img src="./psxprog/s-smp-audio-chip.jpg">
#+html: <br/>

#+attr_html: :style font-size:0.6em;text-align:left;
- *Sony:* Ken Kutaragi
- *S-SMP:* Sound Chip do SNES

** Antes do PlayStation...

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
*Quarta geração de consoles (1987)*

#+attr_html: :style font-size:0.6em;text-align:left;
- Sega Genesis / Sega Mega Drive (1989)
- Super Nintendo / Super Famicom (1991)
#+html: </div>
#+html: <div class="col">
#+HTML: <img src="./psxprog/fourthgen.png">
#+html: </div>
#+html: </div>

#+HTML: <img src="./psxprog/sonic-16.gif">
#+HTML: <img src="./psxprog/mario-16.gif">

#+reveal: split

#+attr_html: :style font-size:0.6em;text-align:center;
3D  já  era  uma realidade  em  filmes  e  simulações,  e até  em  alguns  jogos
(principalmente em arcades).

#+HTML: <img src="./psxprog/starfox-16.gif">

#+attr_html: :style font-size:0.6em;text-align:center;
*Exemplo:* StarFox (SNES, 1993)

** Parceria Sony x Nintendo

#+HTML: <img src="./psxprog/nintendo-playstation.png">

#+attr_html: :style font-size:0.6em;text-align:left;
- *Nintendo Super Disc / Nintendo Play Station*
- Cartuchos de SNES + CD-ROMs
  - Apenas a Sony poderia produzir os CD-ROMs!
- Nintendo "trai" a Sony e fecha parceria com a Phillips

** Quinta geração de consoles (1993)

#+attr_html: :style font-size:0.6em;text-align:left;
Consoles de 32-bits que introduziam o CD-ROM como mídia física*.

#+attr_html: :style font-size:0.6em;text-align:left;
*Objetivo:* Colocar milhares de polígonos na tela -- 3D!

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
- Sega Saturn (1994)
- Sony PlayStation (1994)
- Nintendo 64 (1996)
#+html: </div>
#+html: <div class="col">
#+HTML: <img src="./psxprog/fifthgen.png">
#+html: </div>
#+html: </div>

#+attr_html: :style font-size:0.6em;text-align:left;
*Exceto o Nintendo 64.

#+reveal: split

#+HTML: <img src="./psxprog/sonicr-32.gif">
#+HTML: <img src="./psxprog/crash-32.gif">
#+HTML: <img src="./psxprog/zelda-32.gif">

#+attr_html: :style font-size:0.6em;text-align:center;
*Sonic R* (Sega  Saturn), *Crash Bandicoot* (Sony PlayStation) e  *The Legend of
Zelda: Ocarina of Time* (Nintendo 64).

* Ferramentas e kits de desenvolvimento

** Toolchain legacy

#+attr_html: :style font-size:0.6em;text-align:center;
*Plataforma:* Windows XP / Windows 98

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
- Linguagem C
- Psy-Q + ccpsx (DJGPP modificado)
- Editor de sua escolha
- Várias ferramentas de apoio (TIMTOOL, MC32, etc)
#+html: </div>
#+html: <div class="col">
#+html: <img src="./psxprog/ps1-devkit.jpg">
#+attr_html: :style font-size:0.6em;text-align:left;
*Figura:* Kit de desenvolvimento oficial do PS1.
#+html: </div>
#+html: </div>

*** Net Yaroze (ネットやろうぜ, Netto Yarōze)

# #+html: <div class="container">
# #+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:center;
Promoção da  Sony para atrair  hobbyistas /  indie devs. Incluía  um PlayStation
para  desenvolvimento, cabo  serial, Psy-Q  SDK, guias  de desenvolvimento  e de
hardware...
# #+html: </div>


# #+html: <div class="col">
#+HTML: <img src="./psxprog/netyaroze.jpg">
#+attr_html: :style font-size:0.6em;text-align:center;
*Figura:* Sony Net Yaroze com o SDK.
# #+html: </div>
# #+html: </div>

** Toolchain nova

#+attr_html: :style font-size:0.6em;text-align:center;
*Plataforma:* Windows 11 / Linux

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
- Linguagem C
- Psy-Q + Nugget + GCC-MIPSEL
- Extensão PSX.Dev (VSCode)
#+html: </div>
#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/vscode.png">
#+attr_html: :style font-size:0.6em;text-align:left;
*Figura:* Dashboard da extensão PSX.Dev para VSCode.
#+html: </div>
#+html: </div>
    
** Toolchains alternativas

#+attr_html: :style font-size:0.6em;text-align:left;
- *PSn00bSDK* (C + ASM)
- PsyQo + EASTL (C++)
- Assembly puro (~armips~)

* Hardware

#+HTML: <img class="r-stretch" src="./psxprog/psx-motherboard.png">

#+attr_html: :style font-size:0.6em;text-align:center;
*Figura:* Placa-mãe de um PlayStation modelo SCPH-1000.

** CPU

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
- LSI Logic MIPS R3000A 32-bit (RISC) @ 33.86 MHz
- *Co-processadores:*
  - *Cop0:* /System Control/ (cache, interrupções...)
  - *Cop2:* /Geometry Transformation Engine/ (GTE)
- *MDEC:* /Motion Decoder/ (DSP para decodificar vídeo)

#+attr_html: :style font-size:0.6em;text-align:left;
*AO LADO:* Dieshot do CXD8530Q (primeira revisão), tirado da apresentação do Ken
Kutaragi na Hot Chips '99.

#+attr_html: :style font-size:0.6em;text-align:center;
*Fonte:* PlayStation Dev Wiki
#+html: </div>

#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/cpu-dieshot.jpg">
#+html: </div>
#+html: </div>


#+reveal: split

#+attr_html: :style font-size:0.6em;text-align:left;
A  especificação das  CPUs  MIPS  32-bit possuía  um  co-processador *Cop1*  para
/float/, e um D-Cache para acesso à RAM.

#+attr_html: :style font-size:0.6em;text-align:left;
*O PlayStation 1 não possui nenhum dos dois.*

#+attr_html: :style font-size:0.6em;text-align:center;
Solução: /fixed-points/ e /scratchpad/.

** Memória RAM

#+attr_html: :style font-size:0.6em;text-align:left;
- 2 MB de memória EDO (Extended Data Out)
- Acesso LIVRE (você não terá segmentation faults)
  - Mas pode ter exceções de hardware

*** COMMENT Mapa de memória

#+attr_html: :style font-size:0.6em;text-align:left;
Como 32-bit podem mapear até 2GB, os endereços que "sobram" no PlayStation foram
utilizados para outros propósitos muito úteis.

#+attr_html: :style font-size:0.6em;
| KUSEG    | Tamanho | Descrição                      |
|----------+---------+--------------------------------|
| 00000000 | 2048K   | RAM (primeiros 64K reservados) |
| 1F000000 | 8192K   | Expansão 1 (ROM/RAM)           |
| 1F800000 | 1K      | Scratchpad                     |
| 1F801000 | 4K      | Portas E/S                     |
| ...      | ...     | ...                            |
| 1FC00000 | 512K    | BIOS ROM (Kernel)              |

** GPU

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:left;
- *GPU:* SCPH-9000 (Toshiba)
  - Responsável pela rasterização
  - Apenas rasterização 2D!
- *VRAM:* 1 MB
#+html: </div>

#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/spider-psx.gif">
#+attr_html: :style font-size:0.6em;text-align:center;
*Jogo:*  Spider-Man  (PSX).   Tente  notar os  artefatos  (/polygon  jittering/,
 /z-fighting/, /t-junctions/...)
#+html: </div>
#+html: </div>

** Outras estruturas

#+attr_html: :style font-size:0.6em;text-align:left;
- *SPU* (Sound Processing Unit) (Sony)
  - 16-bit, estéreo ou mono
  - Formato ADPCM, 24 canais
  - Envelope ADSR
  - *SRAM:* 512 KB DRAM
- *CD-ROM*
  - DSP controlador de motor e laser
  - Sistema de arquivos ISO 9660 (Yellow Book)
  - Suporta CD-DA (Red Book), CD-ROM XA

* COMMENT MIPS Assembly

** Exercício

Converta o código em C a seguir para MIPS Assembly do PSX.

#+begin_src c :tangle no :eval never
unsigned a = 1;
unsigned b = 1;
unsigned aux;

unsigned n = 5;

do {
    aux = b;
    b = a + b;
    a = aux;
    n--;
} while(n > 0);
printf("a = %u\nb = %u\n", a, b);
#+end_src

** Estrutura básica

#+begin_src asm :eval never
        .psx
        .create "exercicio1.bin", 0x80010000
        .org    0x80010000
Main:
        ;; Código aqui...
Halt:   j Halt
	nop
End:
        .close
#+end_src

** Primeira tentativa

#+begin_src asm :eval never
Main:   li      $t0, 0x1         ; a = $t0 <- 1
        li      $t1, 0x1         ; b = $t1 <- 1
        li      $t2, 0x5         ; n = $t2 <- 5
Loop:   move    $t3, $t1         ; aux = $t3 <- b
        add     $t1, $t0         ; b <- b + a
        move    $t0, $t3         ; a <- aux
        addi    $t2, $t2, -0x1   ; n <- n + (-1)
        ble     $r0, $t2, Loop   ; goto Loop if (n <= 0)
Halt:   j Halt
	nop
#+end_src

#+attr_html: :style font-size:0.7em;text-align:center;
...Fofo. Só que não funciona. :)

** Pipeline do processador

Um dos erros:

#+begin_example
exercicio1.s(13) error: This instruction can't be in a delay slot
#+end_example

As linhas em questão:

#+begin_src asm :eval never
        ble     $r0, $t2, Loop ; L12
Halt:   j Halt                 ; L13
#+end_src

#+attr_html: :style font-size:0.7em;text-align:center;
*??????????????????????????*

#+reveal: split

O  processador  MIPS  possui  uma  *pipeline*.  Isso  significa  que  até  cinco
instruções podem estar sendo processadas simultaneamente.

- Algumas instruções demoram mais que outras.
  - Jumps, em particular, demoram um ciclo a mais.
- Instruções imediatas demoram um ciclo.

#+html: <img class="r-stretch" src="./psxprog/mips-pipeline.png">

#+reveal: split

Em outras palavras, enquanto ainda estamos preparando o jump a ser executado por
~ble~, já estaríamos processando o jump de ~j~. *ISSO NÃO PODE ACONTECER!*

#+begin_src asm :eval never
        ble     $r0, $t2, Loop
Halt:   j Halt                 ; no delay slot de ble!
#+end_src

** Segunda tentativa

#+attr_html: :style font-size:0.7em;text-align:center;
Podemos  tentar  fazer isso  de  uma  forma  ingênua,  garantindo que  todas  as
instruções "lentas" tenham amplo tempo de execução:

#+begin_src asm :eval never
Loop:   move    $t3, $t1         ; aux = $t3; aux <- b
	nop
        add     $t1, $t0         ; b <- b + a
	nop
        move    $t0, $t3         ; a <- aux
	nop
        addi    $t2, $t2, -0x1   ; n <- n + (-1)
        ble     $r0, $t2, Loop   ; goto Loop if (n <= 0)
	nop
Halt:   j Halt
	nop
#+end_src

#+reveal: split

#+attr_html: :style font-size:0.7em;text-align:center;
...ou  podemos ser  mais  inteligentes que  isso e  pensar  em quais  instruções
realmente precisariam ter seus delay slots garantidos.

#+begin_src asm :eval never
Loop:   move    $t3, $t1         ; aux = $t3; aux <- b
        add     $t1, $t0         ; b <- b + a
	addi    $t2, $t2, -0x1   ; n <- n + (-1)
        move    $t0, $t3         ; a <- aux
        ble     $r0, $t2, Loop   ; goto Loop if (n <= 0)
	nop
Halt:   j Halt
	nop
#+end_src

** Montando e executando

#+begin_src bash :eval never
armips exercicio1.s
bin2exe.py exercicio1.bin exercicio1.exe
#+end_src

#+begin_example
➜  ~ file exercicio1.exe
exercicio1.exe: Sony Playstation executable PC=0x80010000,
GP=0xffffffff, .text=[0x80010000,0x800], Stack=0x801fff00,
()
#+end_example

#+reveal: split

#+html: <img class="r-stretch" src="./psxprog/emulator-1.png">

* Gráficos

#+HTML: <img class="r-stretch" src="./psxprog/psx-graphics-system.png">

#+attr_html: :style font-size:0.6em;text-align:center;
*Fonte:* PlayStation Hardware Reference

** Entendendo o Frame Buffer

#+html: <div class="container">
#+html: <div class="col">
#+HTML: <img src="./psxprog/timtool.png">
#+html: </div>
#+html: <div class="col">
#+HTML: <img src="./psxprog/framebuffer.png">
#+html: </div>
#+html: </div>

#+attr_html: :style font-size:0.6em;text-align:left;
- Color depth: 24bpp, 15bpp ou usando CLUTs (4bpp ou 8bpp).
- Dividido em /texture pages/ (TPAGEs).
- Comporta o /double buffer/ da tela.
- Comporta texturas (tam. máx.: 256x256, precisão de 1 byte)
- Polígonos suportam */gouraud shading/*...

** O que é Gouraud shading?

#+attr_html: :style font-size:0.6em;text-align:left;
- Henri Gouraud, 1971
- Interpolação contínua de cores, pode simular luz

#+html: <div class="container">
#+html: <div class="col">
#+HTML: <img src="./psxprog/gouraud-sphere.gif">
#+attr_html: :style font-size:0.6em;text-align:left;
Esfera low-poly com reflexão especular.
#+html: </div>
#+html: <div class="col">
#+HTML: <img src="./psxprog/banjo.png">
#+attr_html: :style font-size:0.6em;text-align:left;
Banjo, personagem de *Banjo-Kazooie*, como visto no Nintendo 64.
#+html: </div>
#+html: </div>

* Exemplo de código

#+html: <img class="r-stretch" src="./psxprog/psy-q.jpg">

#+attr_html: :style font-size:0.6em;text-align:center;
*Figura:* Detalhe do Psy-Q SDK.

** COMMENT Triângulo Gouraud-shaded (ASM)

#+attr_html: :style font-size:0.6em;text-align:left;
*Algumas constantes:*

#+begin_src asm
        .psx
        .create "exercicio2.bin", 0x80010000
        .org 0x80010000

        IO_BASE_ADDR equ 0x1f80 ; Endereço-base (0x1f800000)
        GP0          equ 0x1810 ; Reg. GP0 (GPU) no segm. de E/S
        GP1          equ 0x1814 ; Reg. GP1 (GPU) no segm. de E/S
Main:
        lui     $t0, IO_BASE_ADDR
	;; ...
#+end_src

#+reveal: split

#+begin_src asm :exports none
        ;; Config. de tela e GPU
        li      $t1, 0x00000000   ; 0 = resetar GPU
        sw      $t1, GP1($t0)     ; escrever packet em GP1 (IO_BASE_ADDR+GP1)
        li      $t1, 0x03000000   ; habilitar display
        sw      $t1, GP1($t0)
        li      $t1, 0x08000001   ; modo 320x240, 15-bit, NTSC
        sw      $t1, GP1($t0)
        li      $t1, 0x06c60260   ; display range horizontal
        sw      $t1, GP1($t0)
        li      $t1, 0x07042018   ; display range vertical
        sw      $t1, GP1($t0)
#+end_src

#+begin_src asm :exports none
        ;; Config. de área de desenho
        li      $t1, 0xe1000400   ; flag: config de desenho
        sw      $t1, GP0($t0)     ; escrever packet em GP0 (IO_BASE_ADDR+GP0)
        li      $t1, 0xe3000000   ; E3: topo-esquerda
        sw      $t1, GP0($t0)
        li      $t1, 0xe403bd3f   ; E4: fundo-direita
        sw      $t1, GP0($t0)
        li      $t1, 0xe5000000   ; E5: offset de desenho
        sw      $t1, GP0($t0)
#+end_src

#+begin_src asm :exports none
        ;; Limpeza da tela
        li      $t1, 0x02000000   ; 02: desenhar retângulo flat-shaded (cor 0x000000)
        sw      $t1, GP0($t0)
        li      $t1, 0x00000000   ; coordenadas topo-esquerda (0, 0) 0x00YYYXXX
        sw      $t1, GP0($t0)
        li      $t1, 0x00ef013f   ; largura e altura (239, 319) 0xHHHHWWWW
        sw      $t1, GP0($t0)	
#+end_src

#+begin_src asm
        ;; Triângulo gouraud-shaded (CC = 30, cores = 0x00BBGGRR)
        li      $t1, 0x300000ff ; 30 = POLY_G3. C1: 0x0000ff
        sw      $t1, GP0($t0)
        li      $t1, 0x002d00a0 ; V1: (160, 720) (0x00YYYXXX)
        sw      $t1, GP0($t0)
        li      $t1, 0x0000ff00 ; C2: 0x00ff00
        sw      $t1, GP0($t0)
        li      $t1, 0x00bb8050 ; V2: (80, 3000)
        sw      $t1, GP0($t0)
        li      $t1, 0x00ff0000 ; C3: 0xff0000
        sw      $t1, GP0($t0)
        li      $t1, 0x00bb80f0 ; V3: (240, 3000)
        sw      $t1, GP0($t0)
#+end_src

#+begin_src asm :exports none
Halt:   j Halt
        nop
        .close
#+end_src

#+reveal: split

#+HTML: <img src="./psxprog/gouraudtriangle.png">

** Cubo Gouraud-shaded (Psy-Q / C)

#+attr_html: :style font-size:0.6em;text-align:left;
*Passo 1:* Definir os vértices e a ordem deles para cada triângulo:

#+html: <div class="container">
#+html: <div class="col">

#+attr_html: :style font-size:0.6em;text-align:left;
#+begin_src c
// NOTA: 64 = 0.015625
// (note que 4096 = 1.0)
SVECTOR vertices[] = {
    { -64, -64, -64 },
    {  64, -64, -64 },
    {  64, -64,  64 },
    { -64, -64,  64 },
    { -64,  64, -64 },
    {  64,  64, -64 },
    {  64,  64,  64 },
    { -64,  64,  64 }
};
#+end_src

#+html: </div>
#+html: <div class="col">

#+attr_html: :style font-size:0.6em;text-align:left;
#+begin_src c
short faces[] = {
    0, 3, 2, // top
    0, 2, 1,
    4, 0, 1, // front
    4, 1, 5,
    7, 4, 5, // bottom
    7, 5, 6,
    5, 1, 2, // right
    5, 2, 6,
    2, 3, 7, // back
    2, 7, 6,
    0, 4, 7, // left
    0, 7, 3
};
#+end_src

#+html: </div>
#+html: </div>

#+reveal: split

#+attr_html: :style font-size:0.6em;text-align:left;
*Passo 2:* Popular a matriz do mundo com rotação, translação e escala

#+attr_html: :style font-size:0.6em;text-align:left;
#+begin_src c
static SVECTOR rotation    = {0, 0, 0};   // manipulado via código
static VECTOR  translation = {0, 0, 700}; // 0.4375
static VECTOR  scale       = {ONE, ONE, ONE};
static MATRIX  world       = {0};

// Populate world matrix with rotation, translation,
// scale values
RotMatrix(&rotation, &world);
TransMatrix(&world, &translation);
ScaleMatrix(&world, &scale);

// Sets world matrix to be used by the GTE for rotation
// and translation
SetRotMatrix(&world);
SetTransMatrix(&world);
#+end_src

#+reveal: split

#+attr_html: :style font-size:0.6em;text-align:left;
*Passo 3:*  Para cada triângulo,  transformar seus vértices e  transformá-los em
pontos 2D:

# #+html: <div class="container">
# #+html: <div class="col">

#+attr_html: :style font-size:0.6em;text-align:left;
#+begin_src c
for(i = 0; i < NUM_FACES * 3; i += 3) {
    POLY_G3 *poly = (POLY_G3*)nextprim;
    setPolyG3(poly);
    setRGB0(poly, 255, 0, 255);
    setRGB1(poly, 255, 255, 0);
    setRGB2(poly, 0, 255, 255);
    nclip = RotAverageNclip3(
        &vertices[faces[i + 0]],
        &vertices[faces[i + 1]],
        &vertices[faces[i + 2]],
        (long*)&poly->x0,
        (long*)&poly->x1,
        (long*)&poly->x2,
        &p, &otz, &flg);
    // ...
}
#+end_src

# #+html: </div>
# #+html: <div class="col">

# #+attr_html: :style font-size:0.6em;text-align:left;
# #+begin_src c
# // Extraído do SDK
# typedef struct {
#     u_long tag;
#     u_char r0, g0, b0, code;
#     short  x0,     y0;
#     u_char r1, g1, b1, pad1;
#     short  x1,     y1;
#     u_char r2, g2, b2, pad2;
#     short  x2,     y2;
# } POLY_G3; /* Gouraud Triangle */
# #+end_src

# #+html: </div>
# #+html: </div>

#+reveal: split

#+attr_html: :style font-size:0.6em;text-align:left;
*Passo  4:* Verificar  se  a primitiva  deveria estar  sendo  desenhada na  tela
(/normal clipping/) e colocá-la na /ordering table/ (lista de primitivas):

#+begin_src c
for(i = 0; i < NUM_FACES * 3; i += 3) {
    // ...
    if(nclip <= 0) continue;

    if((otz > 0) && (otz < OT_LENGTH)) {
        addPrim(ot[currbuff][otz], poly);
        nextprim += sizeof(POLY_G3);
    }
}
#+end_src

#+reveal: split

#+attr_html: :style font-size:0.6em;text-align:left;
*Passo  5:* Esperar  vsync;  desenhar quadro  anterior;  realizar /sorting/  dos
polígonos.

#+html: <div class="container">
#+html: <div class="col">

#+attr_html: :style font-size:0.6em;text-align:left;
#+begin_src c
DrawSync(0);
VSync(0);

PutDispEnv(
    &screen.disp[currbuff]);
PutDrawEnv(
    &screen.draw[currbuff]);

DrawOTag(
    ot[currbuff] +
    OT_LENGTH - 1);
#+end_src

#+html: </div>

#+html: <div class="col">
#+HTML: <img src="./psxprog/gouraudcube.gif">
#+html: </div>
#+html: </div>

* Homebrews

#+attr_html: :style font-size:0.6em;text-align:center;
Pequenos projetos que desenvolvi usando este aprendizado.

** Wipefaux

#+html: <div class="container">
#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/wipefaux.gif">

#+html: </div>
#+html: <div class="col">
#+attr_html: :style font-size:0.6em;text-align:center;
Clone parcial  do jogo  WipEout. Desenvolvido durante  o curso  /PS1 Programming
with MIPS Assembly & C/.

#+html: <div style="font-size:0.76em;text-align:center;">
*[[https://luksamuk.codes/static/psx/?game=wipefaux][JOGUE ONLINE]]*
#+html: </div>

#+attr_html: :style font-size:0.6em;text-align:center;
*ATENÇÃO: Os controles são ruins. Você foi avisado(a). :P*

#+html: </div>
#+html: </div>

** Sonic XA (~engine-psx~)

#+html: <div class="container">
#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/sonicxa-title.gif">
#+html: </div>
#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/sonicxa-level1.gif">
#+html: </div>
#+html: <div class="col">
#+html: <img class="r-stretch" src="./psxprog/sonicxa-greenhill.gif">
#+html: </div>
#+html: </div>


# #+html: <div class="container">
# #+html: <div class="col">

#+attr_html: :style font-size:0.6em;text-align:center;
Fan-game de  Sonic The Hedgehog  utilizando técnicas  do hardware do  PSX (áudio
CD-XA, FMVs via MDEC, etc.)

# #+html: </div>
# #+html: <div class="col">

#+html: <div style="font-size:0.76em;text-align:center;">
*[[https://luksamuk.codes/static/psx/?game=engine][JOGUE ONLINE]] // [[https://github.com/luksamuk/engine-psx][CÓDIGO-FONTE]]*
#+html: </div>

#+attr_html: :style font-size:0.6em;text-align:center;
*ATENÇÃO: Este emulador não toca o áudio. Não é culpa minha...*

# #+html: </div>
# #+html: </div>

** Comunidades, Cursos e Links

#+attr_html: :style font-size:0.6em;text-align:left;
- Cursos e Tutoriais
  - Pikuma.com: [[https://pikuma.com/courses/ps1-programming-mips-assembly-language][PS1 Programming with MIPS Assembly & C]]
  - [[http://lameguy64.net/tutorials/pstutorials/index.html][Lameguy's PlayStation Programming Series]]
  - [[https://wiki.arthus.net/][Website do Schnappy]]
  - Website do Alex Free: [[https://alex-free.github.io/psx-cdr/][The Ultimate Guide to PSX CD-R's]]
- Comunidades
  - [[https://www.psxdev.net/][Fórum PSXDEV Network]]
  - [[https://www.psxdev.net/discord.php][Discord Server da PSXDEV Network]]
- Documentação
  - [[http://www.problemkaputt.de/psx-spx.htm][PSX Spex]] ([[https://psx-spx.consoledev.net/][nova versão em HTML]])
  - [[https://www.psdevwiki.com/ps1/Main_Page][PlayStation Dev Wiki]] (engenharia reversa)
  - [[https://psx.arthus.net/sdk/Psy-Q/DOCS/Devrefs/Hardware.pdf][PlayStation Hardware Reference]] (oficial)
- Outros
  - [[https://all-things-andy-gavin.com/2011/02/02/making-crash-bandicoot-part-1/][Blog do Andy Gavin: Making Crash Bandicoot]]
  - [[https://www.copetti.org/writings/consoles/playstation/][PlayStation Architecture por Rodrigo Copetti]] ([[https://www.copetti.org/pt-br/writings/consoles/playstation/][versão PT-BR]])
    
* Obrigado!

#+html: <div class="container">
#+html: <div class="col">
#+HTML: <img src="./psxprog/ps1-logo.png">
#+html: </div>
#+html: <div class="col">

#+attr_html: :style font-size:0.6em;text-align:center;
*Acesse esta apresentação:*

#+attr_html: :style font-size:0.75em;text-align:center;
https://luksamuk.codes/talks/psx-programming.html

#+html: <div style="font-size:0.6em;text-align:center;">
#+html: <i class="fa fa-envelope" aria-hidden="true"></i><code> lucasvieira@protonmail.com</code><br/>
#+html: <i class="fa fa-linkedin" aria-hidden="true"></i><code> luksamuk</code><br/>
#+html: <i class="fa fa-globe" aria-hidden="true"></i><code> https://luksamuk.codes/</code><br/>
#+html: <i class="fa fa-github" aria-hidden="true"></i><code> luksamuk</code>
#+html: </div>

#+html: </div>
#+html: </div>

#+html: <br/>



