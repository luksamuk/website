#+title:    Programação Pragmática
#+subtitle: Versatilidade e pensamento lateral no desenvolvimento de software
#+author:   Lucas Samuel Vieira
#+email:    lucasvieira@protonmail.com
#+date:     07 de julho de 2023
#+language: en_us
#+reveal_margin: 0.2
#+reveal_trans: linear
#+reveal_theme: dracula
#+reveal_plugins: (print-pdf zoom)
#+options: num:nil timestamp:nil toc:nil
#+reveal_init_options: slideNumber:true
#+startup: latexpreview showall inlineimages
# #+options: reveal_single_file:t

#+reveal_title_slide: <h3>%t</h3><img src="./pragmatic/pragmatic.png" height=200px><p>%s</p><p>%a<br/>%d</p>

:HTML_OPTIONS:
#+html_head: <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

#+html: <style>
#+html: .container{
#+html:     display: flex;
#+html: }
#+html: .col{
#+html:     flex: 1;
#+html: }
#+html: </style>
:END:


* Quem sou eu?


# container begin
#+html: <div class="container">

# Column begin
#+html: <div class="col">
#+attr_html: :style font-size:0.7em;text-align:left;
Tech Lead na ATS Informática

#+attr_html: :style font-size:0.7em;text-align:left;
*Interesses:* Inteligência  artificial, ciência  cognitiva, filosofia  da mente,
teoria   da   computação,   desenvolvimento  de   linguagens   de   programação,
desenvolvimento de jogos, programação bare-metal

#+html: <div style="font-size:0.7em;text-align:left;">
#+html: <p>Co-fundador da Common Lisp Brasil
#+html: <br/>
#+html: <i class="fa fa-globe" aria-hidden="true"></i><code> lisp.com.br</code>
#+html: </p></div>

# Column end
#+html: </div>

# Column begin
#+html: <div class="col">

#+attr_html: :width 200
#+attr_org: :width 200
[[file:pragmatic/eu.jpg]]

#+html: <div style="font-size:0.7em;text-align:left;">
#+html: <i class="fa fa-linkedin" aria-hidden="true"></i><code> luksamuk</code><br/>
#+html: <i class="fa fa-globe" aria-hidden="true"></i><code> https://luksamuk.codes/</code><br/>
#+html: <i class="fa fa-github" aria-hidden="true"></i><code> luksamuk</code>
#+html: </div>

# Column end
#+html: </div>

# container end
#+html: </div>

* Introdução

Vou discutir algumas ideias técnicas para:

- Quem está começando.
- Quem quer ser um programador melhor.
- Quem quer ser um profissional de desesenvolvimento melhor.
  
* O programador iniciante

Conselhos ouvidos por iniciantes:

/"Aprenda X, Y e Z..."/

** Consequências da visão míope disso

- Viram especialistas em X, Y e Z
- Viram especialistas que *SÓ SABEM* X, Y e Z
- Viram especialistas que *odeiam tudo que não seja* X, Y e Z

** Só que...

- Linguagens/frameworks são ferramentas no seu cinto de utilidades
- Conhecimento fora da especialidade = ideias além do óbvio
- Saber "mais coisas" vai te ajudar quando menos esperar
  
# - ex: o programador  é especialista em front-end, mas entende  como funciona uma
#   pipeline de deploy, ou sabe usar Linux, etc
# - Porque,  no  fim  do  dia,  um  programador que  domina  coisas  fora  de  sua
#   especialidade é capaz de ter ideias um pouco diferentes do que alguém que está
#   "preso" na própria especialidade

** Por quê?

- Conhecimento não vive em caixinhas de disciplinas
- Mas passamos a vida toda acostumados com isso

O mesmo vale para a computação!

** Pode dar um exemplo?

*Exemplo:* Dominar frontend/backend + entender /deploy/ e /pipelines/

Tô falando grego? Calma que explico...

*** Dicotomia servidor/cliente clássica

#+HTML: <img class="r-stretch" src="./pragmatic/dichotomy.png">

*** Desenho arquitetural final (simplificado)

#+HTML: <img class="r-stretch" src="./pragmatic/deploy-example.png">

*** O que você precisa saber além do óbvio?

- Linux, linha de comando
- Conteinerização, orquestração de contêineres
- Como  funciona   o  cloud  provider   escolhido  (AWS,  Azure,   Google  Cloud
  Platform...)
- Princípios e ideias de paradigmas de programação que você vê menos
  - Ex: Programação funcional (não é igual a procedural!)

*** Consequências dessa abordagem

- Você vai ser mais assertivo quanto à execução do seu app em prod (DevOps)
- Você vai saber otimizar backend/frontend para essa situação
- O desenvolvimento pode ser otimizado para este cenário

*** Estou perdido(a). É coisa DEMAIS!

- (Geralmente)  você pode  contar com  uma  equipe para  dividir a  carga ou  te
  ensinar
- Nenhum conhecimento disso se adquire de uma vez só!

# - Conhecimento  no   cérebro  não   é  compartimentalizado  em   disciplinas  ou
#   especialidades, como aprendemos desde cedo
# - Estamos acostumados  a abrir  o caderno de  matemática, estudar  matemática, e
#   depois trocar  para um livro de  português, como se essas  coisas não tivessem
#   nada a ver
# - Podemos falar de  linguagem e misturar isso com matemática.  Existe um viés em
#   comum. As coisas não são indissociáveis

# Inserir aqui um exemplo de um serviço de Usuários
# Mostrar a questão da escalabilidade usando Kubernetes, por exemplo
# Falar a respeito de aplicações stateless
# Falar de DevOps

# - O mesmo  vale especificamente para a  área da computação. Saber  como funciona
#   o deploy  (entrega) de uma aplicação  usando Docker e pipelines,  por exemplo,
#   exige que você saiba se virar com uma linha de comando (especialmente Linux)
# - Como  desenvolvedor,  poderá  otimizar  o  desenvolvimento  da  sua  arplicação
#   pensando nesse cenário.
# - Isso traz uma visão holística do ciclo de desenvolvimento do software
# - O  conceito de  DevOps  é justamente  aproximar  desenvolvimento de  operações
#   (infraestrutura, provisionamento  e entrega). Quem melhor  que o desenvolvedor
#   para falar sobre como a aplicação deve ser executada?


# Adendo: programação funcional  vs. orientação a objetos, pensamento  com base em
# performance, imutabilidade, serverless e réplicas stateless na hora do deploy



* O programador pragmático

#+attr_html: :height 500
#+attr_org: :height 50
file:pragmatic/pragprog.jpg

** Pense criticamente sobre o que você está fazendo

- Impacto
- Entrega de valor
- Questione TUDO!

# - Pense criticamente sobre o que você está fazendo
#   - O que você faz tem um impacto no software
#   - O que você faz entrega algum valor para o cliente
#   - Questione absolutamente TUDO
#     - Questione  clean code,  questione paradigmas  de programação,  questione a
#       complexidade das coisas, questione até mesmo essa palestra!!!

** Programadores não são meros codificadores

- /Soft skills/, regras de negócio
- "Isso faz sentido?"

# - Um  programador não  é  pago  apenas para  escrever  código  (adendo: odeio  o
#   neologismo "codar")
#   - Existe o aspecto de soft skills porque a maior parte do trabalho é conversar
#     com outras pessoas, ou buscar se aprofundar nas regras de negócio
#   - Mas quando você está desenvolvendo, é  ESSENCIAL você se perguntar se aquilo
#     FAZ SENTIDO

** Código é para comunicar com *outras pessoas*

- Três leitores: Seu colega, você no futuro, o compilador
- "Tá pronto, não importo mais" é prejudicial

# - Código é  um meio  de comunicação com  outras PESSOAS, ao  contrário do  que a
#   literatura sugere
#   - Analogia das três "pessoas" (o compilador é o mais fácil de agradar)
#   - Escrever as coisas na base do "tá pronto, foda-se" é prejudicial

** Não tolere janelas quebradas!

- Se tá ruim, "interdite" ou mapeie para consertar depois
- /"Não é problema meu"/: a raiz de todo o mal
- Se vai fazer, faça e faça *BEM-FEITO*

# - Não tolerar janelas quebradas!
#   - Se está ruim, "interdite" ou ao menos mapeie para consertar depois
#   - "Não é problema meu" é a raiz de todo o mal
#   - Se vai fazer, faça e faça BEM
    
* Dicas práticas

** Pensamento lateral

- Pensamento com orientação ou ponto de vista diferente da norma
- "Pense fora da caixa" -- mas algum dia você entrou dentro dela?

É difícil treinar isso, mas sair da mesmice ajuda. Eis alguns exemplos.

# - Pensamento lateral é quando temos um pensamento com uma orientação ou ponto de
#   vista diferente da linha normal
#   - O famoso  "pensar fora da  caixa" --  só que você  só precisa fazer  isso se
#     tiver entrado algum dia nela!

** Invista em sua carteira de conhecimentos

- Aprenda uma linguagem nova
- Aprenda uma linguagem *VELHA*

Alguns exemplos para dar água na boca:

*** APL

#+HTML: <img class="r-stretch" src="./pragmatic/APL.png">

*** Forth

#+HTML: <img class="r-stretch" src="./pragmatic/Forth.png">

*** Lisp

#+HTML: <img class="r-stretch" src="./pragmatic/Lisp.png">

# Exemplo de APL
# Exemplo de Forth
# Exemplo de Lisp

# - Invista em sua carteira de conhecimentos!
#   - Aprenda uma linguagem nova
#   - Aprenda uma linguagem VELHA
#     - Exemplo: APL e Forth


** Faça o que todo mundo diz que é difícil

É pra poucos? Então é pra você!

#+HTML: <img class="r-stretch" src="./pragmatic/brio.png">

#+reveal: split

- Faça coisas legais, isso é portfólio -- e tem tutorial pra tudo na internet
  - Faça sua própria linguagem de programação
  - Faça um sistema operacional extremamente básico
  - Coloque no GitHub, escreva a respeito em blog

#+reveal: split

E o mais importante...

  # - Faça algo que todo mundo te diz que é difícil e que é pra poucos
  #   - Se é pra poucos... é pra você mesmo, pô! Cê tem brio?
  #   - Se não  quiser ser  hardcore... ao  menos, faça coisas  legais e  use como
  #     portfolio
  #     - Coloque  no  GitHub,  escreva  a  respeito em  um  blog,  vc  decide.  O
  #       importante é SE DIVERTIR APRENDENDO

** DIVIRTA-SE!

* Concluindo

- Evite ser xiita, ou pelo menos, não leve isso a sério
  * (Mas zoar PHP, Java e JavaScript pode)
- Programação é um trabalho artesanal, mas não menos profissional.
- Tenha bom senso e pense no próximo.
- Use o tempo livre para fazer projetos que você ache serem *legais*.

* Obrigado!

#+html: <div style="font-size:1em;text-align:center;">
#+html: <i class="fa fa-linkedin" aria-hidden="true"></i><code> luksamuk</code><br/>
#+html: <i class="fa fa-globe" aria-hidden="true"></i><code> https://luksamuk.codes/</code><br/>
#+html: <i class="fa fa-github" aria-hidden="true"></i><code> luksamuk</code>
#+html: </div>
