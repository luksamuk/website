#+TITLE: Git
#+SUBTITLE: Webinar Técnico
#+author: Lucas S. Vieira
#+date: 21 de março de 2022
#+email: lucas.vieira@atsinformatica.com.br
#+startup: latexpreview contents inlineimages

#+reveal_margin: 0.2
# #+reveal_transition: none
#+reveal_theme: league
#+reveal_plugins: (print-pdf zoom)
#+options: num:nil timestamp:nil toc:nil
# #+reveal_init_options: transition:"none", slideNumber:true
#+reveal_init_options: slideNumber:true

#+reveal_title_slide: <h3>%t<br/></h3><p>%s<br/><br/>%a</h3><br/><p>%e<br/>%d<br/>ATS Informática</p>

:CUSTOM_CSS:
# Caixas de código
#+html: <style type="text/css">
#+html: .reveal pre {
#+html:     box-shadow: 0px 0px 0px rgba(0, 0, 0, 0) !important;
#+html:     font-size: 0.7em;
#+html: }
#+html: </style>

# Colunas
#+html: <style>
#+html: .container {
#+html:     display: flex;
#+html: }
#+html: .col {
#+html:     flex: 1;
#+html: }
#+html: </style>
:END:

* O que é Git?

#+attr_html: :width 500px
#+attr_org: :width 300px
[[./git_img/git-logo.png]]

** Surgimento do Git

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.7em;text-align:left;

Criado por Linus Torvalds.

Feito para o Linux.

Ao contrário de  outros SCMs (como SVN), Git não  armazena /deltas/, e
sim /snapshots/.

#+html: </div>
#+html: <div class="col">

#+attr_html: :width 500px
#+attr_org: :width 300px
[[./git_img/linus.jpg]]

#+html: </div>
#+html: </div>

** Git vs. GitHub

#+attr_html: :height 200px
#+attr_org: :width 300px
[[./git_img/Octocat.png]]

Git = Controle de versão.

GitHub = /Git forge/ e rede social.

*** Qual a importância de uma Git Forge?

#+ATTR_REVEAL: :frag (highlight-blue)
- Portfolio;
- Compartilhamento de código aberto;
- Hospedagem de sites estáticos (GitHub Pages);
- Integração com outros serviços (ex. Heroku);
- *Comunidade!*

** Uso de linha de comando

#+begin_src bash
$ git status
$ git --help
#+end_src

* Fluxo padrão de Git

** Criando um repositório

#+ATTR_REVEAL: :frag (grow)
- Via ~git clone~
- Via ~git push~ (manualmente)
- Forks de repositórios

** Gerenciando commits

*** Adicionando arquivos para a área de /staging/

#+begin_src bash
$ git add arquivo.txt
$ git add .
$ git add -A
#+end_src

*** Commits

#+begin_src bash
$ git commit
$ git commit -m 'Mensagem do commit'
#+end_src

*** Desfazendo commits

Para desfazer seu último commit na branch atual:

#+begin_src bash
$ git reset --soft HEAD~1
#+end_src

#+ATTR_REVEAL: :frag (appear)
- O número indica a quantidade de commits desfeitos.
- Se estiver no Git CMD, troque =~= por =^=.
- Caso  você queira  reverter  e  REMOVER as  alterações,  use a  flag
  ~--hard~.

*** Definindo o repositório remoto

Adicionar um  repositório remoto  chamado ~origin~ para  o repositório
atual.

#+begin_src bash
$ git remote add \
  origin https://github.com/fulano/repo.git
#+end_src

*** Enviando commits para o repositório remoto

#+begin_src bash
$ git push
#+end_src

#+reveal: split

Pode ser que o /upstream/ da branch não esteja definido.
Podemos criar a branch no repositório remoto (~origin~).

#+begin_src bash
$ git push --set-upstream origin minha_branch
$ git push -u origin minha_branch
#+end_src

** Criando branches

*** Estilo /Git Flow/

#+ATTR_REVEAL: :frag (appear)
- *Branches padrão:* ~master~, ~develop~
- *Novas implementações:* ~feature/xxxx~ (pela ~develop~)
- *Correções de emergência (e SLAs):* ~hotfix/xxxx~ (pela ~master~)
  
#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
$ git checkout develop
$ git checkout -b feature/xxxx
#+end_src

** Gerenciando branches

*** Deletar uma branch (local)

#+begin_src bash
$ git checkout outra_branch
$ git branch -d branch_original

$ git branch -D branch_original
#+end_src

*** Deletar uma branch (remota)

Na verdade, fazemos um "/push/ da remoção".

~origin~ é o nome do repositório remoto.

#+begin_src bash
$ git push origin --delete branch_original
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
$ git push origin :branch_original
#+end_src

*** Remover e recuperar referências de branches remotas

#+begin_src bash
git fetch --prune
#+end_src

* Boas práticas

** Ignorando arquivos

Alguns  arquivos  *não  deveriam*  subir para  o  Git  (salvo  algumas
exceções). Em geral: /arquivos binários/ (blobs).

Isso pode ser feito com um arquivo ~.gitignore~.

#+reveal: split

O arquivo pode ser colocado na raiz do repositório ou em uma subpasta.

#+begin_src text
,*.pdf
,*.jpg
,*.png
,*.exe
,*~
,*.dcu
#+end_src

Exemplos para projetos de cada linguagem: https://gitignore.io

#+reveal: split

Se for extremamente necessário  armazenar arquivos binários *grandes*,
use a extensão Git LFS (/Large File Support/).

#+begin_src bash
$ git lfs track "*.mp3"
$ git lfs track "*.bin"
$ git lfs track "*.res"
#+end_src

[[https://www.atlassian.com/git/tutorials/git-lfs]]

** Atualizar uma branch

Pode  ser  necessário  atualizar  o  branch  atual  de  acordo  com  a
~develop~.

Há duas formas de fazer isto:

#+ATTR_REVEAL: :frag (appear)
- Merge;
- *Rebase*.

#+reveal: split

Antes de mais nada, atualize a ~develop~.

#+begin_src bash
$ git checkout develop
$ git pull
$ git checkout feature/xxxx
#+end_src

*** Merge

O  Git Merge  atualmente  é  o processo  padrão  para recuperar  novos
commits de uma branch pública.

Basta atualizar a ~develop~ e dar merge na feature:

#+begin_src bash
$ git merge develop
#+end_src

"Merge ~develop~ into ~feature/xxx~"

*** Conflitos no Merge

Durante o processo de merge, pode ocorrer conflitos.

#+ATTR_REVEAL: :frag (appear)
*Se  ocorreu um  conflito  durante  um pull  request*,  é boa  prática
realizar  o merge  *na máquina  local* para  garantir que  a aplicação
esteja compilando.

#+ATTR_REVEAL: :frag (appear)
Em  caso  de  /conflitos/,  tenha   sempre  um  comparador  de  código
configurado para melhor visualização.

#+reveal: split

Editores  como Visual  Studio Code,  Emacs  e Vim  podem ajudar  neste
processo.

#+attr_html: :height 500px
#+attr_org: :width 300px
[[./git_img/vscode_conflito.png]]

*** Rebase

O /rebase/ opera sob o seguinte fluxo:

#+ATTR_REVEAL: :frag (appear)
1. "Rebobina" sua branch atual até o ponto em comum com a ~develop~;
2. Recupera todos os novos commits que estão na ~develop~;
3. Reaplica os commits da sua branch novamente, um a um.

#+reveal: split

O /rebase/ efetivamente  *modifica o histórico da branch*,  por isso é
necessário ter acesso de mudança na branch.

#+begin_src bash
$ git rebase develop
#+end_src

"Rebase feature/xxxx onto develop"

#+reveal: split

#+attr_org: :width 300
[[./git_img/rebase1.png]]

#+reveal: split

#+attr_org: :width 300
[[./git_img/rebase2.png]]

*** Regra de ouro do Rebase

*Nunca, NUNCA faça rebase em uma branch PÚBLICA.*

#+ATTR_REVEAL: :frag (appear)
Ex: Completar PR de ~feature/xxxx~ para ~develop~ com /rebase/.

#+ATTR_REVEAL: :frag (appear)
Motivo: Vai zuar a ~develop~ *PRA TODO MUNDO*.

*** Desvantagens do rebase

#+ATTR_REVEAL: :frag (appear)
1. Basicamente *refaz o histórico da branch*.
2. Dependendo do uso, um /rebase/ pode gerar mais de um conflito.
3. O /rebase/ na verdade é um "Comando Bombril".

*** Qual escolher?

O histórico do Git em si é um documento. Ele pode significar:

#+ATTR_REVEAL: :frag (appear)
1. O percurso de /COMO/ e /QUANDO/ foram feitos os commits;
2. Uma linha lógica de desenvolvimento de cada task.

#+reveal: split

Para  o  primeiro caso,  atualize  sua  branch  com /merges/.  Para  o
segundo, use /rebases/.

#+begin_src bash
$ git log
$ git log --oneline
$ git log --graph
$ git log --graph --oneline
#+end_src

#+reveal: split

#+ATTR_ORG: :width 300
[[./git_img/gitlog.png]]

* Produtividade com Git

** Commits em branches erradas

*** Caso 1

"Estou na develop, fiz commit e não criei minha branch!"

#+ATTR_REVEAL: :frag (highlight-green)
1. Crie a branch a partir da ~develop~;
2. Volte para a ~develop~;
3. Desfaça o commit (apagando);
4. Vá para a branch nova e o commit estará lá.

#+reveal: split

Começando da ~develop~:

#+begin_src bash
$ git checkout -b feature/xxxx
$ git checkout develop
$ git reset --hard HEAD~1
$ git checkout feature/xxxx
#+end_src

Para mais de um commit, ajuste o ~git reset~.

*** Caso 2

"Estou na  master, fiz  commit, mas  deveria ter  criado uma  branch a
partir da develop!"

#+ATTR_REVEAL: :frag (appear)
Para começar: Nada de pânico.

#+reveal: split

#+ATTR_REVEAL: :frag (highlight-green)
1. Abra o log;
2. Anote o /hash/ do commit (pode ser o pequeno);
3. Crie a branch normalmente;
4. Faça *cherry-pick* do commit para a sua branch;
5. Desfaça o commit na ~master~.

#+reveal: split

#+begin_src bash
$ git log --oneline

$ git checkout develop
$ git checkout -b feature/xxxx
$ git cherry-pick f5a0f14
$ git checkout master
$ git reset --hard HEAD~1
#+end_src

- Pode dar conflito.
- Para mais commits,  ajuste a quantidade de  /cherry-picks/ (faça-os em
  ordem!) e ajuste o ~git reset~.

** Investigando commits

"Uma   funcionalidade  funcionava   na  data   X,  mas   não  funciona
mais. Preciso descobrir qual commit quebrou a funcionalidade"

*** Git Bisect

É possível realizar  pesquisa binária via Git através  de Bisect. Para
iniciar uma sessão de Bisect:

#+ATTR_REVEAL: :frag (highlight-green)
1. Encontre o /hash/ do commit em que a funcionalidade estava OK;
2. Inicie o processo;
3. Marque o commit atual como "ruim" (quebrado);
4. Marque o commit antigo como "bom", através do /hash/.

#+reveal: split

#+begin_src bash
$ git bisect start
$ git bisect bad
$ git bisect good f5a0f14
#+end_src

Caso  o repositório  use /tags/,  as  versões da  aplicação podem  ser
melhor localizadas através das mesmas!

#+reveal: split

O Bisect realiza checkout em cada commit, a cada passo.

#+ATTR_REVEAL: :frag (highlight-green)
1. Teste a aplicação no commit atual;
2. Se estiver "quebrado", use o comando ~git bisect bad~;
3. Se estiver OK, use ~git bisect good~;
4. Repita até acabarem os passos.

#+reveal: split

Ao  final,  o  Git  estará  apontando para  o  commit  que  quebrou  a
funcionalidade, que poderá ser analisado:

#+begin_src bash
$ git show

$ git show f5a0f14
#+end_src

Para voltar o Git ao normal:

#+begin_src bash
$ git bisect reset
#+end_src

** Revertendo commits

"É fim  da sprint, e durante  testes de integração, foi  detectado que
meu  pull  request  quebrou  algum sistema.  Foi  requisitado  que  eu
revertesse meu pull request."

*** Git Revert

Normalmente, pode-se fazer um revert diretamente pelo Azure DevOps.

Mas existem  situações em que um  revert pode dar conflito  e terá que
ser feito manualmente.

Ex: O PR foi  feito no início da semana e  foi realizada uma resolução
de conflitos sobre ele.

#+reveal: split

Sem problemas!

#+ATTR_REVEAL: :frag (highlight-green)
1. Crie uma branch a partir da ~develop~;
2. Encontre o /commit de merge/ do PR e copie seu /hash/;
3. Realize um revert do commit;
4. Se necessário, resolva conflitos;
5. Dê push, criando a branch remota, e faça um novo PR.

#+reveal: split

#+begin_src bash
$ git checkout develop
$ git checkout -b feature/revert-xxxx
$ git log --graph --oneline
$ git revert f5a0f14
$ git push -u origin feature/revert-xxxx
#+end_src

#+reveal: split

*ATENÇÃO:* /Revert/ e /Reset/ são operações DIFERENTES.

#+ATTR_REVEAL: :frag (appear)
- O  /reset/ é  capaz  de remover  commits que  estejam  em pontas  de
  branches, ou resetar o estado de alteração de arquivos.
- O /revert/ *cria um novo commit*,  retornando um ou mais arquivos ao
  estado anterior.

#+reveal: split

Após criar o PR de revert,  para continuar trabalhando no mesmo código
e consertar bugs, você poderá recriar sua branch e realizar um *revert
do revert*.

#+begin_src bash
$ git checkout develop
$ git checkout -b feature/xxxx
$ git revert f12345
#+end_src

** Investigando operações

"Realizei um Git Reset e deletei meu último commit por acidente. O que
eu faço????"

#+ATTR_REVEAL: :frag (appear)
Primeiramente: Calma.

*** Git Reflog
O Reflog é um log especial de /referência de movimentos/ do Git.

O Reflog é único para cada máquina.

#+reveal: split

#+ATTR_ORG: :width 300
[[./git_img/gitreflog.png]]

#+reveal: split

Pelos /hashes/ do Reflog, você pode:

#+ATTR_REVEAL: :frag (highlight-green)
1. Recriar ou restaurar um arquivo a partir de um ponto no tempo;
2. Resetar uma branch antes de uma operação;
3. Desfazer praticamente qualquer coisa na máquina local.

#+begin_src bash
$ git reflog
$ git checkout f5a0f14 -- src/main.rs
$ git reset --hard f5a0f14
#+end_src

* Extras

** Submodules e Subtrees

Um  repositório pode  operar como  "guarda-chuva", sendo  populado por
outros  repositórios. Isso  pode  ser interessante  para projetos  com
muitos módulos.

#+begin_src text
[submodule "meu_submodulo"]
path = "meu_submodulo"
url = https://github.com/luksamuk/meu_submodulo
#+end_src

#+begin_src bash
$ git submodule init
$ git submodule update
#+end_src

#+reveal: split

Subárvores  incluem   o  código   inteiro  de  outro   repositório  no
repositório atual.

#+begin_src bash
$ git remote add meu_submodulo \
  https://github.com/luksamuk/meu_submodulo

$ git subtree add --squash \
  --prefix=meu_submodulo/ \
  meu_submodulo master
#+end_src

** Integração Contínua (CI) e Entrega Contínua (CD)

É possível  usar soluções de  CI e CD  com repositórios Git.  Cada Git
Forge implementa isso de uma forma.

Exemplo: https://github.com/luksamuk/sonic-platformer

* Conclusão

Os  tópicos apresentados  nem arranham  a superfície  do que  Git pode
fazer.

Recomendo ver o livro do Git.

* Dúvidas?

* Referências

#+ATTR_HTML: :style font-size:0.65em;text-align:left;
Git:      Submodules      vs.       Subtrees.      Disponível      em:
https://andrey.nering.com.br/2016/git-submodules-vs-subtrees/

#+ATTR_HTML: :style font-size:0.65em;text-align:left;
GitHub Blog:  How to undo  (almost) anything with Git.  Disponível em:
https://github.blog/2015-06-08-how-to-undo-almost-anything-with-git/

#+ATTR_HTML: :style font-size:0.65em;text-align:left;
Referência do Git. Disponível em: https://git-scm.com/docs/

#+ATTR_HTML: :style font-size:0.65em;text-align:left;
Livro Oficial do Git. Disponível em: https://git-scm.com/book/en/v2

#+ATTR_HTML: :style font-size:0.65em;text-align:left;
Livro     Oficial    do     Git     (Português).    Disponível     em:
https://git-scm.com/book/pt-br/v2

