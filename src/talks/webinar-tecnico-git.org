#+TITLE: Git
#+SUBTITLE: Webinar Técnico
#+author: Lucas S. Vieira
#+date: 21 de março de 2022
#+email: lucas.vieira@atsinformatica.com.br
#+startup: latexpreview contents inlineimages

#+reveal_margin: 0.2
# #+reveal_transition: none
#+reveal_theme: league
#+reveal_plugins: (print-pdf zoom)
#+options: num:nil timestamp:nil toc:nil
# #+reveal_init_options: transition:"none", slideNumber:true
#+reveal_init_options: slideNumber:true

#+reveal_title_slide: <h3>%t<br/></h3><p>%s<br/><br/>%a</h3><br/><p>%e<br/>%d<br/>ATS Informática</p>

:CUSTOM_CSS:
#+html: <style type="text/css">
#+html: .reveal pre {
#+html:     box-shadow: 0px 0px 0px rgba(0, 0, 0, 0) !important;
#+html: }
#+html: </style>

#+html: <style>
#+html: .container{
#+html:     display: flex;
#+html: }
#+html: .col{
#+html:     flex: 1;
#+html: }
#+html: </style>
:END:

* O que é Git?

#+attr_html: :width 500px
#+attr_org: :width 50px
[[./git_img/git-logo.png]]

** Surgimento do Git

#+html: <div class="container">
#+html: <div class="col">
#+attr_html: :style font-size:0.7em;text-align:left;

Criado por Linus Torvalds.

Feito para o Linux.

Ao contrário de  outros SCMs (como SVN), Git não  armazena /deltas/, e
sim /snapshots/.

#+html: </div>
#+html: <div class="col">

#+attr_html: :width 500px
#+attr_org: :width 20px
[[./git_img/linus.jpg]]

#+html: </div>
#+html: </div>

** Git vs. GitHub

#+attr_html: :height 200px
#+attr_org: :width 50px
[[./git_img/Octocat.png]]

Git = Controle de versão.

GitHub = /Git forge/ e rede social.

*** Qual a importância de uma Git Forge?

#+ATTR_REVEAL: :frag (highlight-blue)
- Portfolio;
- Compartilhamento de código aberto;
- Hospedagem de sites estáticos (GitHub Pages);
- Integração com outros serviços (ex. Heroku);
- *Comunidade!*

** Uso de linha de comando

#+begin_src bash
$ git status
$ git --help
#+end_src

* Fluxo padrão de Git

** Criando um repositório

#+ATTR_REVEAL: :frag (grow)
- Via ~git clone~
- Via ~git push~ (manualmente)
- Forks de repositórios

** Gerenciando commits

*** Adicionando arquivos para a área de /staging/

#+begin_src bash
$ git add arquivo.txt
$ git add .
$ git add -A
#+end_src

*** Commits

#+begin_src bash
$ git commit
$ git commit -m 'Mensagem do commit'
#+end_src

*** Desfazendo commits

Para desfazer seu último commit na branch atual:

#+begin_src bash
$ git reset --soft HEAD~1
#+end_src

#+ATTR_REVEAL: :frag (appear)
- O número indica a quantidade de commits desfeitos.
- Se estiver no Git CMD, troque =~= por =^=.
- Caso  você queira  reverter  e  REMOVER as  alterações,  use a  flag
  ~--hard~.

*** Definindo o repositório remoto

Adicionar um  repositório remoto  chamado ~origin~ para  o repositório
atual.

#+begin_src bash
$ git remote add origin https://github.com/fulano/repo.git
#+end_src

*** Enviando commits para o repositório remoto

#+begin_src bash
$ git push
#+end_src

#+reveal: split

Pode ser que o /upstream/ da branch não esteja definido.
Podemos criar a branch no repositório remoto (~origin~).

#+begin_src bash
$ git push --set-upstream origin minha_branch
$ git push -u origin minha_branch
#+end_src

** Criando branches

*** Estilo /Git Flow/

#+ATTR_REVEAL: :frag (appear)
- *Branches padrão:* ~master~, ~develop~
- *Novas implementações:* ~feature/xxxx~ (pela ~develop~)
- *Correções de emergência (e SLAs):* ~hotfix/xxxx~ (pela ~master~)
  
#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
$ git checkout develop
$ git checkout -b feature/xxxx
#+end_src

** Gerenciando branches

*** Deletar uma branch (local)

#+begin_src bash
$ git checkout outra_branch
$ git branch -d branch_original

$ git branch -D branch_original
#+end_src

*** Deletar uma branch (remota)

Na verdade, fazemos um "/push/ da remoção".

~origin~ é o nome do repositório remoto.

#+begin_src bash
$ git push origin --delete branch_original
#+end_src

#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
$ git push origin :branch_original
#+end_src

*** Remover e recuperar referências de branches remotas

#+begin_src bash
git fetch --prune
#+end_src

* Boas práticas

** Ignorando arquivos

Alguns  arquivos  *não  deveriam*  subir para  o  Git  (salvo  algumas
exceções). Em geral: /arquivos binários/ (blobs).

Isso pode ser feito com um arquivo ~.gitignore~.

#+reveal: split

O arquivo pode ser colocado na raiz do repositório ou em uma subpasta.

#+begin_src text
,*.pdf
,*.jpg
,*.png
,*.exe
,*~
,*.dcu
#+end_src

#+reveal: split

Se for extremamente necessário  armazenar arquivos binários *grandes*,
use a extensão Git LFS (/Large File Support/).

#+begin_src bash
$ git lfs track "*.mp3"
$ git lfs track "*.bin"
$ git lfs track "*.res"
#+end_src

[[https://www.atlassian.com/git/tutorials/git-lfs]]

** Atualizar uma branch

Pode  ser  necessário  atualizar  o  branch  atual  de  acordo  com  a
~develop~.

Há duas formas de fazer isto:

#+ATTR_REVEAL: :frag (appear)
- Merge;
- *Rebase*.

#+reveal: split

Antes de mais nada, atualize a ~develop~.

#+begin_src bash
$ git checkout develop
$ git pull
$ git checkout feature/xxxx
#+end_src

*** Merge

Basta atualizar a ~develop~ e dar merge na feature:

#+begin_src bash
$ git merge develop
#+end_src

"Merge ~develop~ into ~feature/xxx~"

*** Rebase

O /rebase/ opera sob o seguinte fluxo:

#+ATTR_REVEAL: :frag (appear)
1. "Rebobina" sua branch atual até o ponto em comum com a ~develop~;
2. Recupera todos os novos commits que estão na ~develop~;
3. Reaplica os commits da sua branch novamente, um a um.

#+reveal: split

O /rebase/ efetivamente  *modifica o histórico da branch*,  por isso é
necessário ter acesso de mudança na branch.

#+begin_src bash
$ git rebase develop
#+end_src

"Rebase feature/xxxx onto develop"

#+reveal: split

#+attr_org: :width 100
[[./git_img/rebase1.png]]

#+reveal: split

#+attr_org: :width 100
[[./git_img/rebase2.png]]

*** Regra de ouro do Rebase

*Nunca, NUNCA faça rebase em uma branch PÚBLICA.*

#+ATTR_REVEAL: :frag (appear)
Ex: Completar PR de ~feature/xxxx~ para ~develop~ com /rebase/.

#+ATTR_REVEAL: :frag (appear)
Motivo: Vai zuar a ~develop~ *PRA TODO MUNDO*.

*** Desvantagens do rebase

#+ATTR_REVEAL: :frag (appear)
1. Basicamente *refaz o histórico da branch*.
2. Dependendo do uso, um /rebase/ pode gerar mais de um conflito.
3. O /rebase/ na verdade é um "Comando Bombril".

*** Qual escolher?

O histórico do Git em si é um documento. Ele pode significar:

#+ATTR_REVEAL: :frag (appear)
1. O percurso de /COMO/ e /QUANDO/ foram feitos os commits;
2. Uma linha lógica de desenvolvimento de cada task.

#+reveal: split

#+ATTR_REVEAL: :frag (appear)
Para  o  primeiro caso,  atualize  sua  branch  com /merges/.  Para  o
segundo, use /rebases/.

#+ATTR_REVEAL: :frag (appear)
#+begin_src bash
$ git log
$ git log --oneline
$ git log --graph
$ git log --graph --oneline
#+end_src

* Produtividade com Git

** Commits em branches erradas

*** Caso 1

"Estou na develop, fiz commit e não criei minha branch!"

#+ATTR_REVEAL: :frag (highlight-green)
1. Crie a branch a partir da ~develop~;
2. Volte para a ~develop~;
3. Desfaça o commit (apagando);
4. Vá para a branch nova e o commit estará lá.

#+reveal: split

Começando da ~develop~:

#+begin_src bash
$ git checkout -b feature/xxxx
$ git checkout develop
$ git reset --hard HEAD~1
$ git checkout feature/xxxx
#+end_src

Para mais de um commit, ajuste o ~git reset~.

*** Caso 2

"Estou na  master, fiz  commit, mas  deveria ter  criado uma  branch a
partir da develop!"

#+ATTR_REVEAL: :frag (appear)
Para começar: Nada de pânico.

#+reveal: split

#+ATTR_REVEAL: :frag (highlight-green)
1. Abra o log;
2. Anote o /hash/ do commit (pode ser o pequeno);
3. Crie a branch normalmente;
4. Faça *cherry-pick* do commit para a sua branch;
5. Desfaça o commit na ~master~.

#+reveal: split

#+begin_src bash
$ git log --oneline

$ git checkout develop
$ git checkout -b feature/xxxx
$ git cherry-pick f5a0f14
$ git checkout master
$ git reset --hard HEAD~1
#+end_src

- Pode dar conflito.
- Para mais commits,  ajuste a quantidade de  cherry-picks (faça-os em
  ordem!) e ajuste o ~git reset~.

** Investigando através do Git

# Bisect

** Revertendo merges

# Revert do revert

* COMMENT Boas práticas de Git

** Arquivos binários

Tudo aquilo que não for comparável a  um arquivo de texto, para o Git,
é um arquivo binário.

#+ATTR_REVEAL: :frag (appear)
*JAMAIS* suba um arquivo binário para o Git.

#+ATTR_REVEAL: :frag (appear)
Como toda boa regra, há exceções.

*** Arquivo .gitignore

Arquivos gerados dentro do repositório podem ser desconsiderados.

O  ~.gitignore~ opera  verticalmente  ignorando  arquivos via  caminho
absoluto ou /wildcard/.

#+begin_src text
,*.pdf     # Ignora arquivos PDF
,*.exe     # Ignora executáveis do Windows
target/   # Ignora todo o diretório "target" nesta pasta
src/*.dcu # Ignora todos os .dcu na pasta src/
#+end_src

*** Git LFS

Git suporta extensões! Uma das mais conhecidas é o /Large File Support
(LFS)/.

O  LFS  existe para  ajudar  com  armazenamento de  arquivos  binários
grandes que sejam necessários para o projeto.

Cada  /forge/  que suporta  LFS  armazena  os  objetos em  um  /store/
especial.

#+begin_src bash
$ git lfs track "*.mp3"
$ git lfs track "*.bin"
$ git lfs track "*.res"
#+end_src

[[https://www.atlassian.com/git/tutorials/git-lfs][Fonte]]

** Git Submodules e Git Subtrees

Submódulos operam como links para outros repositórios.

#+begin_src text
[submodule "meu_submodulo"]
path = "meu_submodulo"
url = https://github.com/luksamuk/meu_submodulo
#+end_src

#+begin_src bash
$ git submodule init
$ git submodule update
#+end_src

#+reveal: split

Subárvores  incluem   o  código   inteiro  de  outro   repositório  no
repositório atual.

#+begin_src bash
$ git remote add meu_submodulo \
  https://github.com/luksamuk/meu_submodulo

$ git subtree add --squash \
  --prefix=meu_submodulo/ \
  meu_submodulo master
#+end_src

[[https://andrey.nering.com.br/2016/git-submodules-vs-subtrees/][Fonte]]

* COMMENT Produtividade com Git
** TODO Conflitos
** Reflog

** Git Restore

** Git Bisect

# Situação: Funcionalidade  funcionava na  versão X, mas  não funciona
# mais

** Integração contínua (CI) e Entrega contínua (CD)

*** Github Actions

# Falar  que é  possível  chamar  as pipelines  do  Azure pelo  Github
# Actions

* Referências

